setwd("~/Documents/Estudos - Importante/ProjetosGit/Machine Learning Exercises/Activity 3 - Multiple Linear Regression")
#     Data Preprocessing     #
dataset = read.csv('50_Startups.csv')
library(caTools)
set.seed(123)
dataset$State = ifelse(is.na(dataset$State),
ave(dataset$State, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$State)
View(dataset)
#Importing the Dataset
dataset = read.csv('50_Startups.csv')
View(dataset)
View(dataset)
dataset$State = factor(dataset$State,
levels = c('New York','California','Florida'),
labels = c(1,2,3))
#Splitting the Dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(dataset)
View(dataset)
regressor = lm(formula = Profit ~ .,
data = training_set)
summary(regressor)
# Predicting the Test set results
Y_pred = predict(regressor, newdata = test_set)
Y_pred
regressor2 = lm(formula = Profit ~ R.D.Spend,
data = training_set)
# Predicting the Test set results
Y_pred2 = predict(regressor2, newdata = test_set)
Y_pred
Y_pred2
test_set
View(test_set)
Y_pred2
Y_pred
clear
clear()
clearPushBack()
clr
Y_pred
Y_pred2
#Importing the Dataset
dataset = read.csv('50_Startups.csv')
# Encoding Categorical Data
dataset$State = factor(dataset$State,
levels = c('New York','California','Florida'),
labels = c(1,2,3))
#Splitting the Dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
###################################################################
#     Fitting Multiple Linear Regression to the Training set      #
###################################################################
regressor = lm(formula = Profit ~ .,
data = training_set)
# Predicting the Test set results
Y_pred = predict(regressor, newdata = test_set)
##################################################################
#     Building the optimal model using Backward Elimination      #
##################################################################
regressorbe = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State
data = dataset)
regressorbe = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State
data = dataset)
summary(regressorbe)
##################################################################
#     Building the optimal model using Backward Elimination      #
##################################################################
regressorbe = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State
data = dataset)
##################################################################
#     Building the optimal model using Backward Elimination      #
##################################################################
regressorbe = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regressorbe)
#Moment 2
regressorbe = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regressorbe)
#Moment 3
regressorbe = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressorbe)
regressorbe = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressorbe)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
